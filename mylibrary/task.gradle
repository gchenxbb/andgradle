println "\n##################### 示例文件 task.gradle 开始!"

// 示例文件里都是一些定义的自动和非自动执行的任务!

//不带<<的任务，无论执行任何任务都会被执行
task example_auto_task(group: 'example') {
    description "自动执行任务描述"
    println "自动执行任务1，任务名称：$example_auto_task.name!"
    println "自动执行任务1，任务描述：$example_auto_task.description!"
}

//任务1
task example_task_1(group: 'example') << {
    String s = 'my_name'
    println "Original:" + s + " Upper case:" + s.toUpperCase()
    println tasks.getByPath('example_auto_task').path
    println tasks.getByPath('example_auto_task').name
    println tasks.getByPath('example_auto_task').description
    println "任务描述：${example_task_1.description}"
    println "任务分组：${example_task_1.group}"
}

//定义几个被依赖的task
task packageChannel_release_1(group: 'example') << {
    println '打印：packageChannel_release_1'
}
task packageChannel_release_2(group: 'example') << {
    println '打印：packageChannel_release_2'
}
task packageChannel_release_3(group: 'example') << {
    println '打印：packageChannel_release_3'
}

//任务2，依赖任务1,gradle -q example_task_2，会先执行example_task_1
task example_task_2(group: 'example', description: "渠道包", dependsOn: 'example_task_1') {
    dependsOn this.tasks.findAll { task
        -> task.name.startsWith('packageChannel')
    }
}

//任务3，输出0-6数字
task example_task_3(group: 'example') << {
    6.times { print "输出：$it  \n" }
}

//任务4，doFirst和doLast 可以进行多次调用，分别被添加在任务的开头和结尾
task example_task_4(group: 'example') << {
    println "我是任务4！"//第二执行
}

example_task_4.doFirst {
    println "我在任务4前面执行！-1"
}

//任务4最先执行
example_task_4.doFirst {
    println "我在任务4前面执行！-2"
}

example_task_4.doLast {
    println "我在任务4后面执行！1"
}

example_task_4 << {
    println "我在任务4后面执行！2"
}

//任务5，设置自定义属性，任务6，读取属性
task example_task_5(group: 'example') << {
    println '设置自定义属性！'
    ext.myFirstProperty = "myFirstProperty"
    ext.mySecondProperty = "mySecondProperty"
}

//任务6，打印其他任务设置的的属性
task example_task_6(group: 'example', dependsOn: 'example_task_5') << {
    println "打印自定义属性：$example_task_5.myFirstProperty"
    println "打印自定义属性：$example_task_5.mySecondProperty"
    println "自定义属性：${age}"
    println "自定义属性：${myname}"
    println "自定义属性：" + rootProject.ext.phone
}

//任务7，打印当前目录下的文件名
task example_task_7(group: 'example') << {
    file('./').listFiles({ file -> file.isFile() } as FileFilter)
            .sort().each { File file ->
        println "$file.name"
    }
}

//有NoSkipTask7属性，才会执行任务7
example_task_7.onlyIf {
    def execute = project.hasProperty('NoSkipTask7')
    execute
}
//禁用任务7
example_task_7.enabled = true

defaultTasks 'example_task_8_default'
//任务8，默认任务，gradle -q 直接输出默认任务结果，不需要输入任务名
task example_task_8_default(group: 'example') << {
    println '定义默认任务，任务名称：example_task_8'
}

//任务9，复制任务
//一定要没有<<，{}内容自动执行，复制过程点击右侧任务名，否则无法复制
task example_task_9(group: 'example', type: Copy) {
    description 'Copies the copy_src directory to the copy_des directory.'
    println '拷贝任务：从当前目录copy_src到copy_des'
    from './copy_src'
    into './copy_des'
    include('**/*.txt')
}

//任务10，打印project所有属性
this.tasks.create(name: "example_task_10", group: "example", description: "print all property") << {
    Map<String, ?> map = project.getProperties()
    Iterator i = map.entrySet().iterator()
    while (i.hasNext()) {
        Object obj = i.next()
        String key = obj.toString()
        println key
    }
}

//任务12
task(example_task_12, group: "example") << {
    println ' Task 12!'
}

//定义3个动态任务
//gradle -q task1，gradle -q task2
3.times { counter ->
    task "example_task_dynamic_$counter"(group: 'example') << {
        println "我是动态任务，任务名称：example_task_dynamic_$counter !"
    }
}

//依赖任务不同输出
//whenReady 会在已发布的任务之前影响到已发布任务的执行。即使已发布的任务不是主要任务
task pubdistribution(group: 'example') << {
    println "we build the zip with version=$version"
}
task pubrelease(group: 'example', dependsOn: 'pubdistribution') << {
    println 'we release now'
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(pubrelease)) {
        version = '1.1'
    } else {
        version = '1.1-SNAPSHOT'
    }
}

println "##################### 示例文件 task.gradle 结束!"